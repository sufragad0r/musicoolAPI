// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.1
// source: cancion.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamerClient is the client API for Streamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamerClient interface {
	Audio(ctx context.Context, opts ...grpc.CallOption) (Streamer_AudioClient, error)
}

type streamerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamerClient(cc grpc.ClientConnInterface) StreamerClient {
	return &streamerClient{cc}
}

func (c *streamerClient) Audio(ctx context.Context, opts ...grpc.CallOption) (Streamer_AudioClient, error) {
	stream, err := c.cc.NewStream(ctx, &Streamer_ServiceDesc.Streams[0], "/grpc.Streamer/Audio", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerAudioClient{stream}
	return x, nil
}

type Streamer_AudioClient interface {
	Send(*Cancion) error
	Recv() (*Data, error)
	grpc.ClientStream
}

type streamerAudioClient struct {
	grpc.ClientStream
}

func (x *streamerAudioClient) Send(m *Cancion) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamerAudioClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamerServer is the server API for Streamer service.
// All implementations must embed UnimplementedStreamerServer
// for forward compatibility
type StreamerServer interface {
	Audio(Streamer_AudioServer) error
	mustEmbedUnimplementedStreamerServer()
}

// UnimplementedStreamerServer must be embedded to have forward compatible implementations.
type UnimplementedStreamerServer struct {
}

func (UnimplementedStreamerServer) Audio(Streamer_AudioServer) error {
	return status.Errorf(codes.Unimplemented, "method Audio not implemented")
}
func (UnimplementedStreamerServer) mustEmbedUnimplementedStreamerServer() {}

// UnsafeStreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamerServer will
// result in compilation errors.
type UnsafeStreamerServer interface {
	mustEmbedUnimplementedStreamerServer()
}

func RegisterStreamerServer(s grpc.ServiceRegistrar, srv StreamerServer) {
	s.RegisterService(&Streamer_ServiceDesc, srv)
}

func _Streamer_Audio_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamerServer).Audio(&streamerAudioServer{stream})
}

type Streamer_AudioServer interface {
	Send(*Data) error
	Recv() (*Cancion, error)
	grpc.ServerStream
}

type streamerAudioServer struct {
	grpc.ServerStream
}

func (x *streamerAudioServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamerAudioServer) Recv() (*Cancion, error) {
	m := new(Cancion)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Streamer_ServiceDesc is the grpc.ServiceDesc for Streamer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Streamer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Streamer",
	HandlerType: (*StreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Audio",
			Handler:       _Streamer_Audio_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cancion.proto",
}
